<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zebing的博客</title>
  <icon>https://www.gravatar.com/avatar/018de28bcd91e4a9ab38539376674f3d</icon>
  <subtitle>认真勤奋有想法</subtitle>
  <link href="/zebing.github.io/atom.xml" rel="self"/>
  
  <link href="//zebingfu.cn/zebing.github.io/"/>
  <updated>2018-04-20T03:53:14.752Z</updated>
  <id>//zebingfu.cn/zebing.github.io/</id>
  
  <author>
    <name>zebing</name>
    <email>1270105911@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web文件上传全解</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/11/10/20171110/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/11/10/20171110/</id>
    <published>2017-11-10T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前语"><a href="#前语" class="headerlink" title="前语"></a>前语</h3><p>在web工程开发中，由于系统的需求，或多或少都需要用到文件上传。如图片，压缩文件等。文件上传不像普通的表单上传那样，比较简单。文件上传是一个比较复杂的过程。下面将讲解文件上传的几种方式。<br><a id="more"></a></p><h4 id="1-form表单提交"><a href="#1-form表单提交" class="headerlink" title="1.form表单提交"></a>1.form表单提交</h4><p>传统的文件上传方式，通过form表单提交来上传文件。这种方是文件上传最简单最简便的方式。但它的缺点也是最大的。form表单提交给服务器，服务器接收并处理传来的表单，然后返回一个新的网页。这个做法浪费了许多带宽，因为在前后两个页面中的大部分HTML代码往往是相同的。由于每次应用的交互都需要向服务器发送请求，应用的响应时间就依赖于服务器的响应时间。导致性能贼差。因此不推荐使用。</p><p>示例代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-ajax-formData上传"><a href="#2-ajax-formData上传" class="headerlink" title="2.ajax,formData上传"></a>2.ajax,formData上传</h3><p>通过jquery中的ajax方法上传文件，因不用刷新页面，所以不会额外影响性能。但是需要用到formData来处理表单。首先new FormData<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new FormData(document.getElementById(&quot;form&quot;))</span><br></pre></td></tr></table></figure></p><p>然后通过ajax传输<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">"form"</span>));</span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">   type:<span class="string">"post"</span>,</span><br><span class="line">   url:<span class="string">"file.php"</span>,</span><br><span class="line">   data: fd,</span><br><span class="line">   processData: <span class="literal">false</span>,</span><br><span class="line">   contentType: <span class="literal">false</span>,</span><br><span class="line">   success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>需要注意的是 processData: false,ajax不需要对数据做处理。contentType: false,因为是由form表单构造的FormData对象，且已经声明了属性enctype=”multipart/form-data”，所以这里设置为false。</p><h3 id="3-XMLHttpRequest-formData上传"><a href="#3-XMLHttpRequest-formData上传" class="headerlink" title="3.XMLHttpRequest, formData上传"></a>3.XMLHttpRequest, formData上传</h3><p>XMLHttpRequest,formData上传和ajax很相似，因为ajax就是通过XMLHttpRequest封装的，差别就是上传数据要自己发送，且不用设置header,代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">"form"</span>));</span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">  xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'发送成功'</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> xhr.open(<span class="string">'post'</span>, <span class="string">'file.php'</span>, <span class="literal">true</span>);</span><br><span class="line"> xhr.send(fd);</span><br></pre></td></tr></table></figure></p><h3 id="4-XMLHttpRequest-不用formData上传"><a href="#4-XMLHttpRequest-不用formData上传" class="headerlink" title="4.XMLHttpRequest, 不用formData上传"></a>4.XMLHttpRequest, 不用formData上传</h3><p>XMLHttpRequest, 不用formData上传相对来说较复杂，体现在上传的文件要先通过fileReader转换为二进制字符串，还要构造出form-data格式字符串，然后再通过XMLHttpRequest发送，且发送的时候需要设置header。代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">reader.readAsDataURL(file.files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">reader.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> xhr      = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">   <span class="keyword">var</span> boundary = <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>);;</span><br><span class="line">   <span class="keyword">var</span> data     = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">   data += <span class="string">"------"</span> + boundary + <span class="string">"\r\n"</span>;</span><br><span class="line">   data += <span class="string">'content-disposition: form-data; '</span></span><br><span class="line">         + <span class="string">'name="'</span>         + file.name          + <span class="string">'"; '</span></span><br><span class="line">         + <span class="string">'filename="'</span>     + file.files[<span class="number">0</span>].name + <span class="string">'"\r\n'</span>;</span><br><span class="line">   data += <span class="string">'Content-Type: '</span> + file.files[<span class="number">0</span>].type + <span class="string">'\r\n'</span>;</span><br><span class="line">   data += <span class="string">'\r\n'</span>;</span><br><span class="line">   data += reader.result + <span class="string">'\r\n'</span>;</span><br><span class="line">   data += <span class="string">"------"</span> + boundary + <span class="string">"------"</span>;</span><br><span class="line"></span><br><span class="line">   xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'发送成功'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   xhr.open(<span class="string">'POST'</span>, <span class="string">'file.php'</span>);</span><br><span class="line">   xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'multipart/form-data; boundary=----'</span> + boundary);</span><br><span class="line">   xhr.send(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前语&quot;&gt;&lt;a href=&quot;#前语&quot; class=&quot;headerlink&quot; title=&quot;前语&quot;&gt;&lt;/a&gt;前语&lt;/h3&gt;&lt;p&gt;在web工程开发中，由于系统的需求，或多或少都需要用到文件上传。如图片，压缩文件等。文件上传不像普通的表单上传那样，比较简单。文件上传是一个比较复杂的过程。下面将讲解文件上传的几种方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//zebingfu.cn/zebing.github.io/tags/javascript/"/>
    
      <category term="前端" scheme="//zebingfu.cn/zebing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/11/06/20171106/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/11/06/20171106/</id>
    <published>2017-11-06T12:41:22.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h3><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟。<br><a id="more"></a></p><p>Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 3 万 6 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</p><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><h3 id="为什么要使用-Docker？"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a>为什么要使用 Docker？</h3><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><h4 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h4><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h4 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h4><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h4 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h4><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题。</p><h4 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h4><p>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。</p><p>而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h4 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h4><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h4 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h4><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h3 id="ubuntu-16-04安装docker"><a href="#ubuntu-16-04安装docker" class="headerlink" title="ubuntu 16.04安装docker"></a>ubuntu 16.04安装docker</h3><h4 id="1-如果之前安装有老版本的Docker，需要预先卸载"><a href="#1-如果之前安装有老版本的Docker，需要预先卸载" class="headerlink" title="1.如果之前安装有老版本的Docker，需要预先卸载"></a>1.如果之前安装有老版本的Docker，需要预先卸载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine</span><br></pre></td></tr></table></figure><h4 id="2-安装docker包"><a href="#2-安装docker包" class="headerlink" title="2.安装docker包"></a>2.安装docker包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><h4 id="3-添加Docker的官方GPG密钥："><a href="#3-添加Docker的官方GPG密钥：" class="headerlink" title="3.添加Docker的官方GPG密钥："></a>3.添加Docker的官方GPG密钥：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id="4-设置stable稳定的仓库-stable稳定版每季度发布一次，Edge版每月一次"><a href="#4-设置stable稳定的仓库-stable稳定版每季度发布一次，Edge版每月一次" class="headerlink" title="4.设置stable稳定的仓库(stable稳定版每季度发布一次，Edge版每月一次)"></a>4.设置stable稳定的仓库(stable稳定版每季度发布一次，Edge版每月一次)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">        <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">        <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">        stable"</span></span><br></pre></td></tr></table></figure><h4 id="5-更新apt包"><a href="#5-更新apt包" class="headerlink" title="5.更新apt包"></a>5.更新apt包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><h4 id="6-安装Docker-CE"><a href="#6-安装Docker-CE" class="headerlink" title="6.安装Docker CE"></a>6.安装Docker CE</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h2 id="至此Docker-CE就安装完成了，但是国内访问Docker-Hub有时会遇到问题，所以我们可以配置镜像加速器。例如：阿里云，腾讯云等。如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。"><a href="#至此Docker-CE就安装完成了，但是国内访问Docker-Hub有时会遇到问题，所以我们可以配置镜像加速器。例如：阿里云，腾讯云等。如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。" class="headerlink" title="至此Docker CE就安装完成了，但是国内访问Docker Hub有时会遇到问题，所以我们可以配置镜像加速器。例如：阿里云，腾讯云等。如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。"></a>至此Docker CE就安装完成了，但是国内访问Docker Hub有时会遇到问题，所以我们可以配置镜像加速器。例如：阿里云，腾讯云等。如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://8ad7943c.m.daocloud.io</span><br></pre></td></tr></table></figure><h3 id="之后重启docker，就能下载部署镜像了"><a href="#之后重启docker，就能下载部署镜像了" class="headerlink" title="之后重启docker，就能下载部署镜像了"></a>之后重启docker，就能下载部署镜像了</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart docker</span><br><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取ubuntu最新的镜像</span></span><br><span class="line">docker pull ubuntu:latest</span><br><span class="line"><span class="comment"># 列出本地所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 本地镜像名为 ubuntu 的所有镜像</span></span><br><span class="line">docker images ubuntu</span><br><span class="line"><span class="comment"># 本地移除一个或多个指定的镜像</span></span><br><span class="line">docker rmi</span><br><span class="line"><span class="comment"># 移除本地全部镜像</span></span><br><span class="line">docker rmi `docker images -a -q`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看全部容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 查看全部容器的id和信息</span></span><br><span class="line">docker ps -a -q</span><br><span class="line"><span class="comment"># 查看一个正在运行容器进程，支持 ps 命令参数</span></span><br><span class="line">docker top</span><br><span class="line"><span class="comment"># 删除一个容器</span></span><br><span class="line">docker rm [容器id]</span><br><span class="line"><span class="comment"># 删除所有容器</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-Docker&quot;&gt;&lt;a href=&quot;#什么是-Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是 Docker&quot;&gt;&lt;/a&gt;什么是 Docker&lt;/h3&gt;&lt;p&gt;Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟。&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="//zebingfu.cn/zebing.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>linux命令</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/09/15/20170915linux/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/09/15/20170915linux/</id>
    <published>2017-09-15T13:05:02.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>1.　SSH远程登<br>　　ssh <a href="mailto:username@127.0.0.1" target="_blank" rel="noopener">username@127.0.0.1</a><br>2.　将文件/文件夹从远程Ubuntu机拷至本地(scp)<br>　　scp　-r　<a href="mailto:username@192.168.0.1" target="_blank" rel="noopener">username@192.168.0.1</a>:/home/username/remotefile.txt 　/home/username<br>３．将文件/文件夹从远程Ubuntu机拷至本地(scp)<br>scp　-r　<a href="mailto:username@192.168.0.1" target="_blank" rel="noopener">username@192.168.0.1</a>:/home/username/remotefile.txt 　/home/username</p><a id="more"></a><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>ls　显示文件或目录<br>　　- l　列出文件详细信息l(list)<br>　　- a　列出当前目录下所有文件及目录，包括隐藏的a(all)<br>mkdir　创建目录<br>　　-p　创建目录，若无父目录，则创建p(parent)<br>cd　切换目录<br>touch　创建空文件<br>echo　创建带有内容的文件。<br>cat　查看文件内容<br>cp　拷贝<br>mv　移动或重命名<br>rm　删除文件<br>　　-r　递归删除，可删除子目录及文件<br>　　-f　强制删除<br>find　在文件系统中搜索某文件<br>rmdir　删除空目录<br>tree　树形结构显示目录，需要安装tree包<br>ln　创建链接文件</p><h3 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h3><p>stat　显示指定文件的详细信息，比ls更详细<br>who　显示在线登陆用户<br>whoami　显示当前操作用户<br>hostname　显示主机名<br>uname　显示系统信息<br>top 动态显示当前耗费资源最多进程信息<br>ps 显示瞬间进程状态 ps -aux<br>ifconfig 查看网络情况<br>ping 测试网络连通<br>netstat 显示网络状态信息<br>clear 清屏<br>kill 杀死进程，可以先用ps或top命令查看进程的id，然后再用kill命令杀死进程</p><h3 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a>Linux软件包管理</h3><p>dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。<br>sudo dpkg -i tree_1.5.3-1_i386.deb   安装软件<br>sudo dpkg -r tree   卸载软件</p><h3 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h3><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。命令模式下：<br>:q 退出<br>:q! 强制退出<br>:wq 保存并退出</p><h3 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h3><ol><li>添加一个用户组并指定id为1002<br>sudo groupadd －g 1002 www</li><li>添加一个用户到www组并指定id为1003<br>sudo useradd wyx -g 1002 -u 1003 -m</li><li>修改用户的密码<br>sudo passwd wyx</li><li>删除一个用户<br>sudo userdel wyx</li><li>为该用户添加sudo权限<br>sudo usermod -a -G adm wyx<br>sudo usermod -a -G sudo wyx</li><li>查看所有用户和用户组：<br>cat /etc/passwd<br>cat /etc/group</li></ol><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><p>sudo apt-get install package 安装包<br>sudo apt-get install package - - reinstall 重新安装包<br>sudo apt-get -f install 修复安装”-f = ——fix-missing”<br>sudo apt-get remove package 删除包<br>sudo apt-get remove package - - purge 删除包，包括删除配置文件等<br>sudo apt-get update 更新源<br>sudo apt-get upgrade 更新已安装的包<br>apt-cache rdepends package 是查看该包被哪些包依赖<br>apt-get source package 下载该包的源代码<br>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包<br>sudo apt-get check 检查是否有损坏的依赖</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>让进程后台运行<br>＆　或　ctrl+z 输入bg</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ssh&quot;&gt;&lt;a href=&quot;#ssh&quot; class=&quot;headerlink&quot; title=&quot;ssh&quot;&gt;&lt;/a&gt;ssh&lt;/h3&gt;&lt;p&gt;1.　SSH远程登&lt;br&gt;　　ssh &lt;a href=&quot;mailto:username@127.0.0.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;username@127.0.0.1&lt;/a&gt;&lt;br&gt;2.　将文件/文件夹从远程Ubuntu机拷至本地(scp)&lt;br&gt;　　scp　-r　&lt;a href=&quot;mailto:username@192.168.0.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;username@192.168.0.1&lt;/a&gt;:/home/username/remotefile.txt 　/home/username&lt;br&gt;３．将文件/文件夹从远程Ubuntu机拷至本地(scp)&lt;br&gt;scp　-r　&lt;a href=&quot;mailto:username@192.168.0.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;username@192.168.0.1&lt;/a&gt;:/home/username/remotefile.txt 　/home/username&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="//zebingfu.cn/zebing.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>javascript继承</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/07/30/20170630-javascript%E7%BB%A7%E6%89%BF/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/07/30/20170630-javascript继承/</id>
    <published>2017-07-30T13:05:02.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<p>　<br>javascript是一门面向对象的弱类型语言，继承也是它的一大特性。</p><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>要继承就要有子类和父类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superClass</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name || <span class="string">'我是父类'</span>;</span><br><span class="line">&#125;</span><br><span class="line">superClass.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subClass</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">superClass.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后在把superClass实例赋予subClass原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype = <span class="keyword">new</span> superClass();</span><br><span class="line">subClass.constructor = subClass;</span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> subClass(<span class="string">'我是子类'</span>);</span><br><span class="line">sub.getName(); <span class="comment">// 我是父类</span></span><br><span class="line"><span class="built_in">console</span>.log(sub <span class="keyword">instanceof</span> superClass); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(sub <span class="keyword">instanceof</span> subClass); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　&lt;br&gt;javascript是一门面向对象的弱类型语言，继承也是它的一大特性。&lt;/p&gt;
&lt;h3 id=&quot;原型继承&quot;&gt;&lt;a href=&quot;#原型继承&quot; class=&quot;headerlink&quot; title=&quot;原型继承&quot;&gt;&lt;/a&gt;原型继承&lt;/h3&gt;&lt;p&gt;要继承就要有子类和父类&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;superClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name || &lt;span class=&quot;string&quot;&gt;&#39;我是父类&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;superClass.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	superClass.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//zebingfu.cn/zebing.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库存储引擎</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/07/27/mysql-2017-07-27/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/07/27/mysql-2017-07-27/</id>
    <published>2017-07-27T09:36:55.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<p>存储引擎是MySQL数据库管理系统的一个重要特征，在具体开发过程中，选择对的存储引擎对系统的性能来说尤为重要。当然，对那些性能要求不高的系统除外。</p><p>在MySQL5.5版本中，共支持9种存储引擎，分别为FEDERATED、MRG_MYISAM、MYISAM、BLACKHOLE、CSV、MEMORY、ARCHIVE、InnoDB和PERFORMANCE_SCHEMA。</p><p>输入如下命令可查看所有存储引擎<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show engines \G</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>输入如下命令可查看默认存储引擎<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show variables like <span class="string">'storage_engine%'</span></span><br></pre></td></tr></table></figure></p><h3 id="如何选择存储引擎"><a href="#如何选择存储引擎" class="headerlink" title="如何选择存储引擎"></a>如何选择存储引擎</h3><p>选择MySQL数据库管理系统存储引擎是一个非常复杂的问题。因为每个存储引擎都有各自的优势，特性和应用场景。所以要选择一个合适的存储引擎，就要掌握存储引擎的特性。</p><p>下面是几种常用的存储引擎特性比较</p><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">MyISAM</th><th style="text-align:center">InnoDB</th><th style="text-align:center">MEMORY </th></tr></thead><tbody><tr><td style="text-align:center">  存储限制</td><td style="text-align:center">有</td><td style="text-align:center">64TB</td><td style="text-align:center">有</td></tr><tr><td style="text-align:center">  事物安全</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">  锁机制</td><td style="text-align:center">表锁</td><td style="text-align:center">行锁</td><td style="text-align:center">表锁</td></tr><tr><td style="text-align:center">  B树索引</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">  哈希索引</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">  全文搜索</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">  集群索引</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">  数据缓存</td><td style="text-align:center"></td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">  索引缓存</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">  数据可压缩</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">  空间使用</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">  内存使用</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">中等</td></tr><tr><td style="text-align:center">  批量插入的速度</td><td style="text-align:center">高</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">  支持外键</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr></tbody></table><ul><li><h3 id="MyISAM-不支持事物，不支持外键，访问速度较快。对事物完整性没有要求并以访问为主的应用适合选用"><a href="#MyISAM-不支持事物，不支持外键，访问速度较快。对事物完整性没有要求并以访问为主的应用适合选用" class="headerlink" title="MyISAM 不支持事物，不支持外键，访问速度较快。对事物完整性没有要求并以访问为主的应用适合选用"></a>MyISAM 不支持事物，不支持外键，访问速度较快。对事物完整性没有要求并以访问为主的应用适合选用</h3></li><li><h3 id="InnoDB-在事务上有优势，支持具有提交，回滚和崩溃恢复能力的事务安装，比MYISAM占用更多的磁盘空间。需要进行频繁更新，删除操作，同时对事物完整性有要求的适合选用"><a href="#InnoDB-在事务上有优势，支持具有提交，回滚和崩溃恢复能力的事务安装，比MYISAM占用更多的磁盘空间。需要进行频繁更新，删除操作，同时对事物完整性有要求的适合选用" class="headerlink" title="InnoDB 在事务上有优势，支持具有提交，回滚和崩溃恢复能力的事务安装，比MYISAM占用更多的磁盘空间。需要进行频繁更新，删除操作，同时对事物完整性有要求的适合选用"></a>InnoDB 在事务上有优势，支持具有提交，回滚和崩溃恢复能力的事务安装，比MYISAM占用更多的磁盘空间。需要进行频繁更新，删除操作，同时对事物完整性有要求的适合选用</h3></li><li><h3 id="MEMORY-使用内存保存数据，访问速度较快。但安全上没有保障。应用中涉及数据较小，需进行快速访问适合选用"><a href="#MEMORY-使用内存保存数据，访问速度较快。但安全上没有保障。应用中涉及数据较小，需进行快速访问适合选用" class="headerlink" title="MEMORY 使用内存保存数据，访问速度较快。但安全上没有保障。应用中涉及数据较小，需进行快速访问适合选用"></a>MEMORY 使用内存保存数据，访问速度较快。但安全上没有保障。应用中涉及数据较小，需进行快速访问适合选用</h3></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;存储引擎是MySQL数据库管理系统的一个重要特征，在具体开发过程中，选择对的存储引擎对系统的性能来说尤为重要。当然，对那些性能要求不高的系统除外。&lt;/p&gt;
&lt;p&gt;在MySQL5.5版本中，共支持9种存储引擎，分别为FEDERATED、MRG_MYISAM、MYISAM、BLACKHOLE、CSV、MEMORY、ARCHIVE、InnoDB和PERFORMANCE_SCHEMA。&lt;/p&gt;
&lt;p&gt;输入如下命令可查看所有存储引擎&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ show engines \G&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="//zebingfu.cn/zebing.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>图片懒加载</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/06/15/lazy-20170615/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/06/15/lazy-20170615/</id>
    <published>2017-06-15T04:41:48.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<p>在那些图片比较多的网站，如果一开始就全部加载出来，不仅会严重拖慢网站的性能，给用户不好的体验，还会加载那些用户不会看到的图片，浪费用户的流量。这显然，不是我们所想要的。因此，我们必须要对这些图片加载进行优化，那就是懒加载。</p><h3 id="什么是图片懒加载？"><a href="#什么是图片懒加载？" class="headerlink" title="什么是图片懒加载？"></a>什么是图片懒加载？</h3><p>简单的说，图片懒加载就是只对那些要用到的图片进行加载，没用到的就不给它加载。</p><h3 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h3><p>首先我们先获取所有的img节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>)</span><br></pre></td></tr></table></figure><p>然后监听页面的scroll事件，页面一滑动，就加载那些需要显示的图片，另外为了不重复显示，在那些已经显示的图片，我们给它加一个属性data-load赋值true。</p><a id="more"></a><p>刚开始只加载三张图片<br><img src="http://orklhfurd.bkt.clouddn.com/lazy1.png" alt="text alt"></p><p>随着页面的滑动，渐渐的加载剩下的图片<br><img src="http://orklhfurd.bkt.clouddn.com/lazy2.png" alt="text alt"><br>下面是完整的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;懒加载&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        html,body,ul&#123;margin: 0;padding: 0;&#125;</span></span><br><span class="line"><span class="string">        li&#123;list-style: none;width: 100%;min-height: 300px;box-shadow: 0 0 10px blue;overflow: hidden;&#125;</span></span><br><span class="line"><span class="string">        li:not(:first-child)&#123;margin: 20px 0;&#125;</span></span><br><span class="line"><span class="string">        .container&#123;width: 300px; margin: 0 auto;&#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>container<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">1.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">2.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">3.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">4.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">5.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">6.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">8.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">9.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">10.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;img data-src="</span>./image/<span class="number">11.</span>jpg<span class="string">" width="</span><span class="number">100</span>%<span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    function Lazy()&#123;</span></span><br><span class="line"><span class="string">        this.img = [];</span></span><br><span class="line"><span class="string">        this.height; //视口高度</span></span><br><span class="line"><span class="string">        this.beforeView = 10; //在视口之前10px加载</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Lazy.prototype = &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //下载图片</span></span><br><span class="line"><span class="string">        loadImg: function() &#123;</span></span><br><span class="line"><span class="string">            this.img = this.img.length ? this.img : document.getElementsByTagName('img');</span></span><br><span class="line"><span class="string">            for(var i = 0; i &lt; this.img.length; i++) &#123;</span></span><br><span class="line"><span class="string">                if(this.isLoad(this.img[i])) &#123;</span></span><br><span class="line"><span class="string">                    if(!this.img[i].getAttribute('data-load')) &#123;</span></span><br><span class="line"><span class="string">                        this.img[i].src = this.img[i].getAttribute('data-src');</span></span><br><span class="line"><span class="string">                        this.img[i].setAttribute('data-load', 'true')</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">                &#125;else&#123;</span></span><br><span class="line"><span class="string">                    return;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //判断是否继续下载图片</span></span><br><span class="line"><span class="string">        isLoad: function(ele) &#123;</span></span><br><span class="line"><span class="string">            this.height = this.height ? this.height : (window.innerHeight || document.documentElement.clientHeight);</span></span><br><span class="line"><span class="string">            var sh = document.body.scrollTop || document.documentElement.scrollTop; </span></span><br><span class="line"><span class="string">            var et = ele.offsetTop; </span></span><br><span class="line"><span class="string">            var ch = et - sh - this.beforeView;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            if(ch &lt;= this.height) &#123;</span></span><br><span class="line"><span class="string">                return true; // 继续加载</span></span><br><span class="line"><span class="string">            &#125;else&#123;</span></span><br><span class="line"><span class="string">                return false; //停止加载</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var lazy = new Lazy();</span></span><br><span class="line"><span class="string">    lazy.loadImg();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onscroll = function () &#123;</span></span><br><span class="line"><span class="string">        lazy.loadImg();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在那些图片比较多的网站，如果一开始就全部加载出来，不仅会严重拖慢网站的性能，给用户不好的体验，还会加载那些用户不会看到的图片，浪费用户的流量。这显然，不是我们所想要的。因此，我们必须要对这些图片加载进行优化，那就是懒加载。&lt;/p&gt;
&lt;h3 id=&quot;什么是图片懒加载？&quot;&gt;&lt;a href=&quot;#什么是图片懒加载？&quot; class=&quot;headerlink&quot; title=&quot;什么是图片懒加载？&quot;&gt;&lt;/a&gt;什么是图片懒加载？&lt;/h3&gt;&lt;p&gt;简单的说，图片懒加载就是只对那些要用到的图片进行加载，没用到的就不给它加载。&lt;/p&gt;
&lt;h3 id=&quot;如何实现？&quot;&gt;&lt;a href=&quot;#如何实现？&quot; class=&quot;headerlink&quot; title=&quot;如何实现？&quot;&gt;&lt;/a&gt;如何实现？&lt;/h3&gt;&lt;p&gt;首先我们先获取所有的img节点&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后监听页面的scroll事件，页面一滑动，就加载那些需要显示的图片，另外为了不重复显示，在那些已经显示的图片，我们给它加一个属性data-load赋值true。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//zebingfu.cn/zebing.github.io/tags/javascript/"/>
    
      <category term="懒加载" scheme="//zebingfu.cn/zebing.github.io/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>php 自动加载</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/06/11/hp-autoload/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/06/11/hp-autoload/</id>
    <published>2017-06-11T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，每个类通常被放在单独的一个文件，而要使用这些类，就要将类文件加载进来。以前通常用include包含进来，但是如果有很多类文件，那就要写一长串的include，令人很烦恼。</p><p>在php5之后，有了更好的解决方法。那就是自动加载。自动加载有两个方法。分别是__autoload()和spl_autoload_register()。<br><span style="color:#d02727;"><br>尽管 __autoload()函数也能自动加载类和接口，但是相对spl_autoload_register() 来说不够灵活，而且以后可能被淘汰，建议使用spl_autoload_register()来自动加载。<br></span></p><a id="more"></a><h2 id="autoload"><a href="#autoload" class="headerlink" title="__autoload()"></a>__autoload()</h2><p>虽然不建议使用 __autoload() 但还是要简单说一下。下面举一个简单的使用。<br>假设有两个类，A类和B类，分别在A.php和B.php中。<br>A类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'我是A类&lt;br/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'我是B类&lt;br/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在index.php中调用A类和B类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($class)</span> </span>&#123;   </span><br><span class="line">    $file = $class . <span class="string">'.class.php'</span>;   </span><br><span class="line">    <span class="keyword">if</span> (is_file($file)) &#123;   </span><br><span class="line">        <span class="keyword">require_once</span>($file);   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;   </span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我是A类</span></span><br><span class="line"><span class="comment">//我是B类</span></span><br></pre></td></tr></table></figure></p><h2 id="spl-autoload-register"><a href="#spl-autoload-register" class="headerlink" title="spl_autoload_register()"></a>spl_autoload_register()</h2><p>(PHP 5 &gt;= 5.1.2, PHP 7)<br>spl_autoload_register — 注册给定的函数作为 __autoload 的实现</p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool spl_autoload_register ([ callable $autoload_function [, bool $throw = <span class="keyword">true</span> [, bool $prepend = <span class="keyword">false</span> ]]] )</span><br></pre></td></tr></table></figure><p>将函数注册到SPL __autoload函数队列中。如果该队列中的函数尚未激活，则激活它们。</p><p>如果在你的程序中已经实现了__autoload()函数，它必须显式注册到__autoload()队列中。因为 spl_autoload_register()函数会将Zend Engine中的__autoload()函数取代为spl_autoload()或spl_autoload_call()。</p><p>如果需要多条 autoload 函数，spl_autoload_register() 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>autoload_function<br>欲注册的自动装载函数。如果没有提供任何参数，则自动注册 autoload 的默认实现函数spl_autoload()。</p><p>throw<br>此参数设置了 autoload_function 无法成功注册时， spl_autoload_register()是否抛出异常。</p><p>prepend<br>如果是 true，spl_autoload_register() 会添加函数到队列之首，而不是队列尾部。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>成功时返回 TRUE， 或者在失败时返回 FALSE。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>同样假设有两个类，A类和B类，分别在A.php和B.php中。<br>A类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'我是A类&lt;br/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'我是B类&lt;br/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在index.php中调用A类和B类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">spl_autoload_register();</span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我是A类</span></span><br><span class="line"><span class="comment">//我是B类</span></span><br></pre></td></tr></table></figure></p><p>这只是spl_autoload_register()简单的使用，这里调用的默认的spl __autoload()方法来加载，当然我们也可以自己定义__autoload()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($class)</span> </span>&#123;   </span><br><span class="line">    $file = $class . <span class="string">'.class.php'</span>;   </span><br><span class="line">    <span class="keyword">if</span> (is_file($file)) &#123;   </span><br><span class="line">        <span class="keyword">require_once</span>($file);   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125; </span><br><span class="line">spl_autoload_register(<span class="string">'load'</span>);  </span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我是A类</span></span><br><span class="line"><span class="comment">//我是B类</span></span><br></pre></td></tr></table></figure></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>如果类文件的名字不是A.php，B.php，而是A.class.php，B.class.php,也不再同一目录下，而在class目录下，那么就会出现问题。<br>方法1 通过set_include_path()和spl_autoload_extensions()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">set_include_path(<span class="string">'class'</span>);</span><br><span class="line">spl_autoload_extensions(<span class="string">'.class.php'</span>);</span><br><span class="line">spl_autoload_register(); </span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure></p><p>方法二 通过自己定义__autoload()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($class)</span> </span>&#123;   </span><br><span class="line">    $file = <span class="string">'./class/'</span>.$class . <span class="string">'.class.php'</span>;   </span><br><span class="line">    <span class="keyword">if</span> (is_file($file)) &#123;   </span><br><span class="line">        <span class="keyword">require_once</span>($file);   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="string">'load'</span>); </span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，每个类通常被放在单独的一个文件，而要使用这些类，就要将类文件加载进来。以前通常用include包含进来，但是如果有很多类文件，那就要写一长串的include，令人很烦恼。&lt;/p&gt;
&lt;p&gt;在php5之后，有了更好的解决方法。那就是自动加载。自动加载有两个方法。分别是__autoload()和spl_autoload_register()。&lt;br&gt;&lt;span style=&quot;color:#d02727;&quot;&gt;&lt;br&gt;尽管 __autoload()函数也能自动加载类和接口，但是相对spl_autoload_register() 来说不够灵活，而且以后可能被淘汰，建议使用spl_autoload_register()来自动加载。&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="//zebingfu.cn/zebing.github.io/tags/php/"/>
    
      <category term="自动加载" scheme="//zebingfu.cn/zebing.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>javascript设计模式之单例模式</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/06/07/javascriptdanlimoshi/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/06/07/javascriptdanlimoshi/</id>
    <published>2017-06-07T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><span style="color:#0099ff">单例模式的定义</span>是保证一个类有且只有一个实例存在。</p><p><span style="color:#0099ff">单例模式的的用途</span>试想一下,当我们单击登录按钮的时候,页面中会出现一个登录浮窗,而这个登录浮窗是唯一的,无论单击多少次登录按钮,这个浮窗都只会被创建一次,那么这个登录浮窗就适合用单例模式来创建。比如大家都知道的12306 是唯一购票网站，所有人要网上订票都得访问这个单例。</p><p><span style="color:#0099ff">单例模式带来的好处</span>除了减少不必要的重复的实例创建、减少内存占用外，更重要的是避免多个实例的存在造成逻辑上的错误。比如超级马里奥的游戏中，虽然各种小怪的实例会不断创建多个，但当前的玩家肯定只有一个，如果游戏运行过程中创建出新的马里奥的实例了，显然就出 bug 了。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现的方法是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Single = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Single.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">this</span>.instance )&#123;</span><br><span class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Single( name );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = Single.getInstance( <span class="string">'name1'</span> );</span><br><span class="line"><span class="keyword">var</span> obj2 = Single.getInstance( <span class="string">'name2'</span> );</span><br><span class="line">alert ( obj1 === obj2 );<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><span style="color:#0099ff">用代理实现单例模式</span><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Single = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = (<span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> ( !instance )&#123;</span><br><span class="line">             instance = <span class="keyword">new</span> Single( name );</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = proxy( <span class="string">'name1'</span> );</span><br><span class="line"><span class="keyword">var</span> obj2 = proxy( <span class="string">'name2'</span> );</span><br><span class="line">alert ( obj1 === obj2 );<span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;color:#0099ff&quot;&gt;单例模式的定义&lt;/span&gt;是保证一个类有且只有一个实例存在。&lt;/p&gt;
&lt;p&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="javascript" scheme="//zebingfu.cn/zebing.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="//zebingfu.cn/zebing.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="//zebingfu.cn/zebing.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置pathinfo方法</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/06/03/pathinfo/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/06/03/pathinfo/</id>
    <published>2017-06-03T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是pathinfo"><a href="#什么是pathinfo" class="headerlink" title="什么是pathinfo?"></a>什么是pathinfo?</h3><p>要想在nginx下配pathinfo,首先要先搞清楚什么是pathinfo?大家都知道一般我们访问php后台文件的时候,路径一般都是<a href="http://localhost/xxx.php" target="_blank" rel="noopener">http://localhost/xxx.php</a>, 假设我们的路径是 <a href="http://localhost/xxx" target="_blank" rel="noopener">http://localhost/xxx</a> ,而这时如果没有配置pathinfo的话,屏幕就会显示404,就是找不到该文件或该文件不存在。在thinkphp5框架中的路径就是这种模式。有些朋友可能会问：在apache下面没有配置pathinfo怎么没有出现问题。这是因为apache已经默认配置了pathinfo。说了这么多，那究竟什么是pathinfo呢？</p><p>首先要说明一点，pathinfo不是nginx的功能，pathinfo是php的功能。php中有两个pathinfo，一个是环境变量$_SERVER[‘PATH_INFO’]；另一个是pathinfo函数，pathinfo() 函数以数组的形式返回文件路径的信息;。nginx能做的只是对$_SERVER[‘PATH_INFO]值的设置。</p><h3 id="nginx配置pathinfo"><a href="#nginx配置pathinfo" class="headerlink" title="nginx配置pathinfo"></a>nginx配置pathinfo</h3><p>下面是一个完整的配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># listen [::]:443 ssl http2;</span></span><br><span class="line">    <span class="comment"># listen 443 ssl http2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># include ssl.conf;</span></span><br><span class="line">    <span class="comment"># ssl_certificate /path/to/crt;</span></span><br><span class="line">    <span class="comment"># ssl_certificate_key /path/to/key;</span></span><br><span class="line"></span><br><span class="line">    root /var/www; <span class="comment">#网站根目录</span></span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    server_name localhost; <span class="comment">#域名</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">        <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;                </span><br><span class="line">            rewrite  ^/(.*)$ /index.php?s=<span class="variable">$1</span>  last; </span><br><span class="line">            <span class="built_in">break</span>;                                 </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /phpmyadmin &#123;</span><br><span class="line">       index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; <span class="comment">#php7.0版本</span></span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param PATH_INFO <span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只需要修改把下面三个地方修改成对应的东西即可</p><blockquote><ol><li>root /var/www; #网站根目录</li><li>server_name localhost; #域名</li><li>fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; #php7.0版本</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是pathinfo&quot;&gt;&lt;a href=&quot;#什么是pathinfo&quot; class=&quot;headerlink&quot; title=&quot;什么是pathinfo?&quot;&gt;&lt;/a&gt;什么是pathinfo?&lt;/h3&gt;&lt;p&gt;要想在nginx下配pathinfo,首先要先搞清楚什么是pat
      
    
    </summary>
    
    
      <category term="php" scheme="//zebingfu.cn/zebing.github.io/tags/php/"/>
    
      <category term="nginx" scheme="//zebingfu.cn/zebing.github.io/tags/nginx/"/>
    
      <category term="thinkphp" scheme="//zebingfu.cn/zebing.github.io/tags/thinkphp/"/>
    
      <category term="pathinfo" scheme="//zebingfu.cn/zebing.github.io/tags/pathinfo/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04 composer的安装，卸载及使用国内镜像</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/06/01/composer/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/06/01/composer/</id>
    <published>2017-06-01T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>composer的安装比较简单，执行如下命令就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install composer</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>有时候composer在使用过程中产生了一些错误，或者认为操作产生的错误，影响到composer的继续使用，这是不得不卸载重装（简单粗暴但是有效）。<br>首先卸载composer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get remove composer</span><br></pre></td></tr></table></figure><p>然后把composer依赖的你不再需要的东西也删掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get autoremove</span><br></pre></td></tr></table></figure><h3 id="使用国内镜像"><a href="#使用国内镜像" class="headerlink" title="使用国内镜像"></a>使用国内镜像</h3><p>由于composer的源镜像是在国外，导致我们在执行composer install 的时候会出现超时，而无法安装完成，比如腾讯云或阿里云服务器，以下为出错信息</p><blockquote><p>root@VM-180-14-ubuntu:/# composer install<br>Loading composer repositories with package information<br>Updating dependencies (including require-dev)<br>Failed to decode response: zlib_decode(): data error<br>Retrying with degraded mode, check <a href="https://getcomposer.org/doc/articles/troubleshooting.md#degraded-mode" target="_blank" rel="noopener">https://getcomposer.org/doc/articles/troubleshooting.md#degraded-mode</a> for more info</p><p>   [Composer\Downloader\TransportException]<br>     Your configuration does not allow connection to <a href="http://packagist.org" target="_blank" rel="noopener">http://packagist.org</a>. See h<br>     ttps://getcomposer.org/doc/06-config.md#secure-http for details.             </p><p>install [–prefer-source] [–prefer-dist] [–dry-run] [–dev] [–no-dev] [–no-plugins] [–no-custom-installers] [–no-autoloader] [–no-scripts] [–no-progress] [-v|vv|vvv|–verbose] [-o|–optimize-autoloader] [-a|–classmap-authoritative] [–ignore-platform-reqs] [–] [<packages>]…</packages></p></blockquote><h5 id="有两种方式启用本镜像服务："><a href="#有两种方式启用本镜像服务：" class="headerlink" title="有两种方式启用本镜像服务："></a>有两种方式启用本镜像服务：</h5><p>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”<br>单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”</p><p>方法一： 修改 composer 的全局配置文件（推荐方式）</p><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>方法二： 修改当前项目的 composer.json 配置文件：</p><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo<span class="selector-class">.packagist</span> composer https:<span class="comment">//packagist.phpcomposer.com</span></span><br></pre></td></tr></table></figure><p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"repositories"</span>: &#123;</span><br><span class="line">    <span class="string">"packagist"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"composer"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://packagist.phpcomposer.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;composer的安装比较简单，执行如下命令就可以&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="php" scheme="//zebingfu.cn/zebing.github.io/tags/php/"/>
    
      <category term="ubuntu" scheme="//zebingfu.cn/zebing.github.io/tags/ubuntu/"/>
    
      <category term="composer" scheme="//zebingfu.cn/zebing.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04 搭建lnmp环境</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/05/20/ubuntu-16-04/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/05/20/ubuntu-16-04/</id>
    <published>2017-05-20T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前语"><a href="#前语" class="headerlink" title="前语"></a>前语</h3><p>首先切换到root下安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -i</span></span><br></pre></td></tr></table></figure><p>不一定要在root下，自己视情况而定，这里我是在root下安装</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install nginx</span><br></pre></td></tr></table></figure><p>首先执行 apt-get update 更新软件源，然后安装 apt-get install nginx</p><p>这时候检验一下是否搭建成功，在浏览器输入</p><blockquote><p>localhost</p></blockquote><p>如果浏览器显示 welcome to nginx 则说明nginx已经安装成功</p><p><img src="http://upload-images.jianshu.io/upload_images/414166-5f9090e16db9a358.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt="Alt text"></p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>安装过程中会让你输入两次密码,这是root密码,一定要记下来,后面安装phpmyadmin会用到</p><h3 id="安装php7-0"><a href="#安装php7-0" class="headerlink" title="安装php7.0"></a>安装php7.0</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get -y install php7.0-fpm php7.0-mysql php7.0-curl</span><br></pre></td></tr></table></figure><p>安装完之后,要改掉php配置中的 fix_pathinfo 潜在安全漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/php/7.0/fpm/php.ini</span><br></pre></td></tr></table></figure><p>找到下面这条语句 </p><blockquote><p>;cgi.fix_pathinfo=1</p></blockquote><p>改成</p><blockquote><p>cgi.fix_pathinfo=0</p></blockquote><p>然后重启php,记住修改配置文件一定要重启一下才会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart php7.0-fpm</span><br></pre></td></tr></table></figure><p>下面添加nginx配置文件,以支持php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>下面是要添加的内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># listen [::]:443 ssl http2;</span></span><br><span class="line">    <span class="comment"># listen 443 ssl http2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># include ssl.conf;</span></span><br><span class="line">    <span class="comment"># ssl_certificate /path/to/crt;</span></span><br><span class="line">    <span class="comment"># ssl_certificate_key /path/to/key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#server_domain_or_IP改成你的网站目录名称</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/server_domain_or_IP;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#server_domain_or_IP改成你的域名或ip</span></span><br><span class="line">    <span class="attribute">server_name</span> server_domain_or_IP;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /phpmyadmin &#123;</span><br><span class="line">       <span class="attribute">index</span> index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>接下来测试PHP是否已完成安装配置,上面nginx配置root /var/www/html;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi <span class="regexp">/var/</span>www<span class="regexp">/html/i</span>nfo.php</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    phpinfo();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>在浏览器中输入</p><blockquote><p>localhost/info.php</p></blockquote><p>出现下图则说明安装成功</p><p><img src="http://upload-images.jianshu.io/upload_images/414166-0b8673bf19fa6c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p><h3 id="安装phpMyAdmin"><a href="#安装phpMyAdmin" class="headerlink" title="安装phpMyAdmin"></a>安装phpMyAdmin</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="builtin-name">get</span> update</span><br><span class="line">$ apt-<span class="builtin-name">get</span> install phpmyadmin php-mbstring php-gettext</span><br></pre></td></tr></table></figure><p>创建phpmyadmin链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s <span class="regexp">/usr/</span>share<span class="regexp">/phpmyadmin/</span>  <span class="regexp">/var/</span>www<span class="regexp">/html/</span></span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>在浏览器重输入</p><blockquote><p>localhost/phpmyadmin</p></blockquote><p>出现下图则说明安装成功</p><p><img src="http://upload-images.jianshu.io/upload_images/414166-38361bfd5ed9e2ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>vim /etc/php/7.0/fpm/php.ini 可能会提示您没有安装vim,安装就行,安装命令 apt-get install vim</li><li>vi和vim编辑文件,首先按 i 开始编辑,编辑完之后 按Esc键,然后按 shift+: 最后输入wq保存</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前语&quot;&gt;&lt;a href=&quot;#前语&quot; class=&quot;headerlink&quot; title=&quot;前语&quot;&gt;&lt;/a&gt;前语&lt;/h3&gt;&lt;p&gt;首先切换到root下安装&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="php" scheme="//zebingfu.cn/zebing.github.io/tags/php/"/>
    
      <category term="ubuntu" scheme="//zebingfu.cn/zebing.github.io/tags/ubuntu/"/>
    
      <category term="mysql" scheme="//zebingfu.cn/zebing.github.io/tags/mysql/"/>
    
      <category term="nginx" scheme="//zebingfu.cn/zebing.github.io/tags/nginx/"/>
    
      <category term="phpmyadmin" scheme="//zebingfu.cn/zebing.github.io/tags/phpmyadmin/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="//zebingfu.cn/zebing.github.io/2017/05/19/hello-world/"/>
    <id>//zebingfu.cn/zebing.github.io/2017/05/19/hello-world/</id>
    <published>2017-05-19T06:48:00.000Z</published>
    <updated>2018-04-20T03:53:14.752Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
