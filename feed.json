{"title":"zebing的博客","description":"zebing,zebing的微薄,湖南科技大学14级,擅长前端技能，深入了解后端php。此为博客一枚","language":"","link":"//zebingfu.cn/zebing.github.io","pubDate":"Fri, 10 Nov 2017 06:48:00 GMT","lastBuildDate":"Fri, 20 Apr 2018 05:32:37 GMT","generator":"hexo-generator-json-feed","webMaster":"zebing","items":[{"title":"web文件上传全解","link":"//zebingfu.cn/zebing.github.io/2017/11/10/20171110/","description":"前语在web工程开发中，由于系统的需求，或多或少都需要用到文件上传。如图片，压缩文件等。文件上传不像普通的表单上传那样，比较简单。文件上传是一个比较复杂的过程。下面将讲解文件上传的几种方式。","pubDate":"Fri, 10 Nov 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/11/10/20171110/","category":"javascript,前端"},{"title":"docker","link":"//zebingfu.cn/zebing.github.io/2017/11/06/20171106/","description":"什么是 DockerDocker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟。","pubDate":"Mon, 06 Nov 2017 12:41:22 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/11/06/20171106/","category":"docker"},{"title":"linux命令","link":"//zebingfu.cn/zebing.github.io/2017/09/15/20170915linux/","description":"ssh1. SSH远程登 ssh username@127.0.0.12. 将文件/文件夹从远程Ubuntu机拷至本地(scp) scp -r username@192.168.0.1:/home/username/remotefile.txt /home/username３．将文件/文件夹从远程Ubuntu机拷至本地(scp)scp -r username@192.168.0.1:/home/username/remotefile.txt /home/username","pubDate":"Fri, 15 Sep 2017 13:05:02 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/09/15/20170915linux/","category":"linux"},{"title":"javascript继承","link":"//zebingfu.cn/zebing.github.io/2017/07/30/20170630-javascript继承/","description":"javascript是一门面向对象的弱类型语言，继承也是它的一大特性。 原型继承要继承就要有子类和父类 1234567891011// 父类function superClass(name) &#123; this.name = name || '我是父类';&#125;superClass.prototype.getName = function() &#123; console.log(this.name);&#125;// 子类function subClass(name) &#123; superClass.call(this, name);&#125;","pubDate":"Sun, 30 Jul 2017 13:05:02 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/07/30/20170630-javascript继承/","category":"javascript"},{"title":"mysql数据库存储引擎","link":"//zebingfu.cn/zebing.github.io/2017/07/27/mysql-2017-07-27/","description":"存储引擎是MySQL数据库管理系统的一个重要特征，在具体开发过程中，选择对的存储引擎对系统的性能来说尤为重要。当然，对那些性能要求不高的系统除外。 在MySQL5.5版本中，共支持9种存储引擎，分别为FEDERATED、MRG_MYISAM、MYISAM、BLACKHOLE、CSV、MEMORY、ARCHIVE、InnoDB和PERFORMANCE_SCHEMA。 输入如下命令可查看所有存储引擎1$ show engines \\G","pubDate":"Thu, 27 Jul 2017 09:36:55 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/07/27/mysql-2017-07-27/","category":"mysql"},{"title":"图片懒加载","link":"//zebingfu.cn/zebing.github.io/2017/06/15/lazy-20170615/","description":"在那些图片比较多的网站，如果一开始就全部加载出来，不仅会严重拖慢网站的性能，给用户不好的体验，还会加载那些用户不会看到的图片，浪费用户的流量。这显然，不是我们所想要的。因此，我们必须要对这些图片加载进行优化，那就是懒加载。 什么是图片懒加载？简单的说，图片懒加载就是只对那些要用到的图片进行加载，没用到的就不给它加载。 如何实现？首先我们先获取所有的img节点 1document.getElementsByTagName('img') 然后监听页面的scroll事件，页面一滑动，就加载那些需要显示的图片，另外为了不重复显示，在那些已经显示的图片，我们给它加一个属性data-load赋值true。","pubDate":"Thu, 15 Jun 2017 04:41:48 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/06/15/lazy-20170615/","category":"javascript,懒加载"},{"title":"php 自动加载","link":"//zebingfu.cn/zebing.github.io/2017/06/11/hp-autoload/","description":"在开发过程中，每个类通常被放在单独的一个文件，而要使用这些类，就要将类文件加载进来。以前通常用include包含进来，但是如果有很多类文件，那就要写一长串的include，令人很烦恼。 在php5之后，有了更好的解决方法。那就是自动加载。自动加载有两个方法。分别是__autoload()和spl_autoload_register()。尽管 __autoload()函数也能自动加载类和接口，但是相对spl_autoload_register() 来说不够灵活，而且以后可能被淘汰，建议使用spl_autoload_register()来自动加载。","pubDate":"Sun, 11 Jun 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/06/11/hp-autoload/","category":"php,自动加载"},{"title":"javascript设计模式之单例模式","link":"//zebingfu.cn/zebing.github.io/2017/06/07/javascriptdanlimoshi/","description":"介绍单例模式的定义是保证一个类有且只有一个实例存在。 单例模式的的用途试想一下,当我们单击登录按钮的时候,页面中会出现一个登录浮窗,而这个登录浮窗是唯一的,无论单击多少次登录按钮,这个浮窗都只会被创建一次,那么这个登录浮窗就适合用单例模式来创建。比如大家都知道的12306 是唯一购票网站，所有人要网上订票都得访问这个单例。 单例模式带来的好处除了减少不必要的重复的实例创建、减少内存占用外，更重要的是避免多个实例的存在造成逻辑上的错误。比如超级马里奥的游戏中，虽然各种小怪的实例会不断创建多个，但当前的玩家肯定只有一个，如果游戏运行过程中创建出新的马里奥的实例了，显然就出 bug 了。 实现实现的方法是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。 123456789101112131415var Single = function( name )&#123; this.name = name; this.instance = null;&#125;;Single.getInstance = function( name )&#123; if ( !this.instance )&#123; this.instance = new Single( name ); &#125; return this.instance;&#125;;var obj1 = Single.getInstance( 'name1' );var obj2 = Single.getInstance( 'name2' );alert ( obj1 === obj2 );// true 扩展用代理实现单例模式1234567891011121314151617var Single = function( name )&#123; this.name = name;&#125;;var proxy = (function( name )&#123; var instance; return function(name)&#123; if ( !instance )&#123; instance = new Single( name ); &#125; return instance; &#125; &#125;)();var obj1 = proxy( 'name1' );var obj2 = proxy( 'name2' );alert ( obj1 === obj2 );// true","pubDate":"Wed, 07 Jun 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/06/07/javascriptdanlimoshi/","category":"javascript,设计模式,单例模式"},{"title":"nginx配置pathinfo方法","link":"//zebingfu.cn/zebing.github.io/2017/06/03/pathinfo/","description":"什么是pathinfo?要想在nginx下配pathinfo,首先要先搞清楚什么是pathinfo?大家都知道一般我们访问php后台文件的时候,路径一般都是http://localhost/xxx.php, 假设我们的路径是 http://localhost/xxx ,而这时如果没有配置pathinfo的话,屏幕就会显示404,就是找不到该文件或该文件不存在。在thinkphp5框架中的路径就是这种模式。有些朋友可能会问：在apache下面没有配置pathinfo怎么没有出现问题。这是因为apache已经默认配置了pathinfo。说了这么多，那究竟什么是pathinfo呢？ 首先要说明一点，pathinfo不是nginx的功能，pathinfo是php的功能。php中有两个pathinfo，一个是环境变量$_SERVER[‘PATH_INFO’]；另一个是pathinfo函数，pathinfo() 函数以数组的形式返回文件路径的信息;。nginx能做的只是对$_SERVER[‘PATH_INFO]值的设置。 nginx配置pathinfo下面是一个完整的配置1234567891011121314151617181920212223242526272829303132333435363738394041server &#123; listen 80; listen [::]:80; # listen [::]:443 ssl http2; # listen 443 ssl http2; # include ssl.conf; # ssl_certificate /path/to/crt; # ssl_certificate_key /path/to/key; root /var/www; #网站根目录 index index.html index.htm index.php; server_name localhost; #域名 location / &#123; index index.html index.htm index.php; if (!-e $request_filename) &#123; rewrite ^/(.*)$ /index.php?s=$1 last; break; &#125; &#125; location /phpmyadmin &#123; index index.php; &#125; location ~ \\.php$ &#123; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; #php7.0版本 fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $request_uri; &#125; location ~ /\\.ht &#123; deny all; &#125;&#125; 只需要修改把下面三个地方修改成对应的东西即可 root /var/www; #网站根目录 server_name localhost; #域名 fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; #php7.0版本","pubDate":"Sat, 03 Jun 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/06/03/pathinfo/","category":"php,nginx,thinkphp,pathinfo"},{"title":"ubuntu 16.04 composer的安装，卸载及使用国内镜像","link":"//zebingfu.cn/zebing.github.io/2017/06/01/composer/","description":"安装composer的安装比较简单，执行如下命令就可以 1$ apt-get install composer 卸载有时候composer在使用过程中产生了一些错误，或者认为操作产生的错误，影响到composer的继续使用，这是不得不卸载重装（简单粗暴但是有效）。首先卸载composer 1$ apt-get remove composer 然后把composer依赖的你不再需要的东西也删掉 1$ apt-get autoremove 使用国内镜像由于composer的源镜像是在国外，导致我们在执行composer install 的时候会出现超时，而无法安装完成，比如腾讯云或阿里云服务器，以下为出错信息 root@VM-180-14-ubuntu:/# composer installLoading composer repositories with package informationUpdating dependencies (including require-dev)Failed to decode response: zlib_decode(): data errorRetrying with degraded mode, check https://getcomposer.org/doc/articles/troubleshooting.md#degraded-mode for more info [Composer\\Downloader\\TransportException] Your configuration does not allow connection to http://packagist.org. See h ttps://getcomposer.org/doc/06-config.md#secure-http for details. install [–prefer-source] [–prefer-dist] [–dry-run] [–dev] [–no-dev] [–no-plugins] [–no-custom-installers] [–no-autoloader] [–no-scripts] [–no-progress] [-v|vv|vvv|–verbose] [-o|–optimize-autoloader] [-a|–classmap-authoritative] [–ignore-platform-reqs] [–] []… 有两种方式启用本镜像服务：系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二” 方法一： 修改 composer 的全局配置文件（推荐方式） 打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令： 1composer config -g repo.packagist composer https://packagist.phpcomposer.com 方法二： 修改当前项目的 composer.json 配置文件： 打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令： 1composer config repo.packagist composer https://packagist.phpcomposer.com 上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）： 123456\"repositories\": &#123; \"packagist\": &#123; \"type\": \"composer\", \"url\": \"https://packagist.phpcomposer.com\" &#125;&#125;","pubDate":"Thu, 01 Jun 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/06/01/composer/","category":"ubuntu,composer,php"},{"title":"ubuntu 16.04 搭建lnmp环境","link":"//zebingfu.cn/zebing.github.io/2017/05/20/ubuntu-16-04/","description":"前语首先切换到root下安装 1$ sudo -i 不一定要在root下，自己视情况而定，这里我是在root下安装 安装nginx12$ apt-get update$ apt-get install nginx 首先执行 apt-get update 更新软件源，然后安装 apt-get install nginx 这时候检验一下是否搭建成功，在浏览器输入 localhost 如果浏览器显示 welcome to nginx 则说明nginx已经安装成功 安装mysql1$ apt-get install mysql-server 安装过程中会让你输入两次密码,这是root密码,一定要记下来,后面安装phpmyadmin会用到 安装php7.01$ apt-get -y install php7.0-fpm php7.0-mysql php7.0-curl 安装完之后,要改掉php配置中的 fix_pathinfo 潜在安全漏洞 1$ vim /etc/php/7.0/fpm/php.ini 找到下面这条语句 ;cgi.fix_pathinfo=1 改成 cgi.fix_pathinfo=0 然后重启php,记住修改配置文件一定要重启一下才会生效 1$ systemctl restart php7.0-fpm 下面添加nginx配置文件,以支持php 1$ vim /etc/nginx/sites-available/default 下面是要添加的内容 1234567891011121314151617181920212223242526272829303132333435server &#123; listen 80; listen [::]:80; # listen [::]:443 ssl http2; # listen 443 ssl http2; # include ssl.conf; # ssl_certificate /path/to/crt; # ssl_certificate_key /path/to/key; #server_domain_or_IP改成你的网站目录名称 root /var/www/server_domain_or_IP; index index.html index.htm index.php; #server_domain_or_IP改成你的域名或ip server_name server_domain_or_IP; location / &#123; try_files $uri $uri/ =404; &#125; location /phpmyadmin &#123; index index.php; &#125; location ~ \\.php$ &#123; include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.0-fpm.sock; &#125; location ~ /\\.ht &#123; deny all; &#125;&#125; 然后重启nginx 1$ systemctl restart nginx 接下来测试PHP是否已完成安装配置,上面nginx配置root /var/www/html; 1$ vi /var/www/html/info.php 添加以下内容 123&lt;?php phpinfo();?&gt; 在浏览器中输入 localhost/info.php 出现下图则说明安装成功 安装phpMyAdmin12$ apt-get update$ apt-get install phpmyadmin php-mbstring php-gettext 创建phpmyadmin链接 1$ ln -s /usr/share/phpmyadmin/ /var/www/html/ 重启nginx 1$ systemctl restart nginx 在浏览器重输入 localhost/phpmyadmin 出现下图则说明安装成功 注意事项 vim /etc/php/7.0/fpm/php.ini 可能会提示您没有安装vim,安装就行,安装命令 apt-get install vim vi和vim编辑文件,首先按 i 开始编辑,编辑完之后 按Esc键,然后按 shift+: 最后输入wq保存","pubDate":"Sat, 20 May 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/05/20/ubuntu-16-04/","category":"ubuntu,php,nginx,mysql,phpmyadmin"},{"title":"Hello World","link":"//zebingfu.cn/zebing.github.io/2017/05/19/hello-world/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","pubDate":"Fri, 19 May 2017 06:48:00 GMT","guid":"//zebingfu.cn/zebing.github.io/2017/05/19/hello-world/","category":""}]}